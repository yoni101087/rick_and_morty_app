
name: Kubernetes Deployment Workflow

on:
  push:
    branches:
      - master

jobs:
  setup-k8s-cluster:
    runs-on: self-hosted   # Specify the runner label for your self-hosted runner
    steps:
      - name: Set up Kubernetes cluster
        # Add steps to set up MicroK8s or any other Kubernetes cluster on the runner
        run: |
          # Example: Install MicroK8s
          sudo snap install microk8s --classic
          sudo microk8s.start

    env:
      APPLICATION: rick_and_morty_app
      NAMESPACE: default

  deploy-app:
    needs: setup-k8s-cluster
    runs-on: self-hosted   # Specify the runner label for your self-hosted runner
    steps:
      - name: Check out code
        uses: actions/checkout@v3

          
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build the Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/rick_and_morty_app:latest .
        

      - name: Push the Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/rick_and_morty_app:latest

      - name: Deploy to Kubernetes with helm
        # Add steps to deploy the application to the Kubernetes cluster
        run: |
          helm upgrade rick-and-morty-app ./charts \
          --install \
          --namespace default
          

  test-app:
    needs: deploy-app
    runs-on: self-hosted   # Specify the runner label for your self-hosted runner
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Run Tests
        # Add steps to run tests against your application endpoints
        run: |
          # Example: Run tests using a test framework or curl commands
          curl http://app.local/healthcheck

  save-artifact:
    needs: test-app
    runs-on: self-hosted
    steps:
      - name: Package Helm chart
        run: |
          helm package ./charts

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-release-${{ github.sha }}
          path: ./rick-and-morty-app-0.1.0.tgz
          
      - name: Authenticate with Nexus and create repository
        env:
          NEXUS_URL: 'http://nexus.local'  # Replace with your Nexus URL
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          SESSION_TOKEN=$(curl -s -X POST "$NEXUS_URL/service/rapture/session" -d "username=$NEXUS_USERNAME&password=$NEXUS_PASSWORD" | jq -r .data.token)
          echo "SESSION_TOKEN: $SESSION_TOKEN"

          # Additional verification steps
          if [ -z "$SESSION_TOKEN" ]; then
          echo "Session token not received or is empty."
          exit 1
          fi

          # Your repository creation request here
          curl -X POST "$NEXUS_URL/service/rest/beta/repositories/helm/hosted" \
            -H "Authorization: Bearer $SESSION_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "rick_and_morty_app",
              "online": true,
              "storage": {
                "blobStoreName": "default",
                "strictContentTypeValidation": true
              }
            }'

      - name: Upload artifact to Nexus
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL: 'http://nexus.local'  # Replace with your Nexus URL
          NEXUS_REPOSITORY: 'rick_and_morty_app'  # Replace with the repository ID in Nexus
        run: |
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./rick-and-morty-app-0.1.0.tgz $NEXUS_URL/repository/$NEXUS_REPOSITORY/my-release/${{ github.sha }}/my-release-${{ github.sha }}.tgz

