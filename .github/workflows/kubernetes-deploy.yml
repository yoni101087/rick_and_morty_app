name: Kubernetes Deployment Workflow

on:
  push:
    branches:
      - master

jobs:
  setup-k8s-cluster:
    runs-on: self-hosted  # Using a self-hosted runner
    steps:
      - name: Set up Kubernetes cluster
        run: |
          sudo snap install microk8s --classic
          sudo microk8s.start

    env:
      APPLICATION: rick_and_morty_app
      NAMESPACE: default

  build-and-push:
    needs: setup-k8s-cluster
    runs-on: self-hosted
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Wait for BuildKit Pod to be Ready
        run: |
          while [[ -z "$(kubectl get pods -n buildkit -l app.kubernetes.io/instance=buildkit --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')" ]]; do
            echo "Waiting for BuildKit to be ready..."
            sleep 5
          done

      - name: Set BuildKit as the Remote Builder
        run: echo "DOCKER_HOST=tcp://buildkit.buildkit.svc.cluster.local:1234" >> $GITHUB_ENV

      - name: Build and push Docker Image using MicroK8s BuildKit
        run: |
          POD_NAME=$(kubectl get pods -n buildkit -l app.kubernetes.io/instance=buildkit --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
          echo "Using BuildKit Pod: $POD_NAME"

          kubectl exec -n buildkit -it $POD_NAME -- \
            buildctl build \
              --frontend=dockerfile.v0 \
              --local context=. \
              --local dockerfile=. \
              --output type=image,name=${{ secrets.DOCKERHUB_USERNAME }}/rick_and_morty_app:latest,push=true \
              --output type=image,name=${{ secrets.DOCKERHUB_USERNAME }}/rick_and_morty_app:${{ github.sha }},push=true \
              --export-cache type=inline \
              --import-cache type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/rick_and_morty_app:cache \
              --progress=plain

  deploy-app:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Deploy to Kubernetes with Helm
        run: |
          helm upgrade rick-and-morty-app ./charts \
          --install \
          --set image.tag=${{ github.sha }} \
          --namespace default

  test-app:
    needs: deploy-app
    runs-on: self-hosted
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          curl http://app.local/healthcheck || exit 1

  save-artifact:
    needs: test-app
    runs-on: self-hosted
    steps:
      - name: Package Helm chart
        run: |
          helm package ./charts --version ${{ github.sha }}

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-release-${{ github.sha }}
          path: ./rick-and-morty-app-${{ github.sha }}.tgz

      - name: Upload artifact to Nexus
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL: 'http://nexus.yonif.net'
          NEXUS_REPOSITORY: 'rick_and_morty_app'
        run: |
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./rick-and-morty-app-${{ github.sha }}.tgz $NEXUS_URL/repository/$NEXUS_REPOSITORY/my-release/${{ github.sha }}/my-release-${{ github.sha }}.tgz
